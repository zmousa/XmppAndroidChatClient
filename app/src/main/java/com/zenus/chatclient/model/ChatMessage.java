package com.zenus.chatclient.model;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 

/**
 * Entity mapped to table CHAT_MESSAGE.
 */
public class ChatMessage {

    private Long id;
    private String message;
    private String userName;
    private java.util.Date createDate;
    private Boolean isNew;
    private Long chatRoomId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient ChatMessageDao myDao;

    private ChatRoom chatRoom;
    private Long chatRoom__resolvedKey;


    public ChatMessage() {
    }

    public ChatMessage(Long id) {
        this.id = id;
    }

    public ChatMessage(Long id, String message, String userName, java.util.Date createDate, Boolean isNew, Long chatRoomId) {
        this.id = id;
        this.message = message;
        this.userName = userName;
        this.createDate = createDate;
        this.isNew = isNew;
        this.chatRoomId = chatRoomId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChatMessageDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public java.util.Date getCreateDate() {
        return createDate;
    }

    public void setCreateDate(java.util.Date createDate) {
        this.createDate = createDate;
    }

    public Boolean getIsNew() {
        return isNew;
    }

    public void setIsNew(Boolean isNew) {
        this.isNew = isNew;
    }

    public Long getChatRoomId() {
        return chatRoomId;
    }

    public void setChatRoomId(Long chatRoomId) {
        this.chatRoomId = chatRoomId;
    }

    /** To-one relationship, resolved on first access. */
    public ChatRoom getChatRoom() {
        Long __key = this.chatRoomId;
        if (chatRoom__resolvedKey == null || !chatRoom__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            ChatRoomDao targetDao = daoSession.getChatRoomDao();
            ChatRoom chatRoomNew = targetDao.load(__key);
            synchronized (this) {
                chatRoom = chatRoomNew;
            	chatRoom__resolvedKey = __key;
            }
        }
        return chatRoom;
    }

    public void setChatRoom(ChatRoom chatRoom) {
        synchronized (this) {
            this.chatRoom = chatRoom;
            chatRoomId = chatRoom == null ? null : chatRoom.getId();
            chatRoom__resolvedKey = chatRoomId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
